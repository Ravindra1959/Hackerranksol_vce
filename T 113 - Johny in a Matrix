You are given a matrix A of size NxN. Every cell has a value A[i][j] associated with it. Johny is standing currently at position (1,1) and he intends to get to cell (N,N).

The cost of going from cell (i,j) to cell(x,y) is A[i][j] * A[x][y].

Johny can either decided to travel in a row-major order or in a column-major order.

Your task is to find out which method will cost him less. Print "row-major" or "column-major" accordingly.

Input
First line contains an integer N
Next N lines each contain N integers each denoting the value of the array A[][]

Output
Print either "row-major" or "column-major". If both ways cost the same then print "row-major".

Sample Input 0

2
1 2
3 4
Sample Output 0

column-major
Explanation 0

row major cost = 1x2 + 2x3 + 3x4 = 2 + 6 + 12 = 20
col major cost = 1x3 + 3x2 + 2x4 = 3 + 6 + 8 = 17
Hence the answer is column-major

Code:

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() 
{
    int n;
    scanf("%d",&n);
    int arr[n][n],i,j;
    for(i=0;i<n;i++)
        for(j=0;j<n;j++)
            scanf("%d",&arr[i][j]);
    int rm = 0, cm = 0;
    //row-major value
    for(i=0;i<n;i++)
    {
        for(j=1;j<n;j++)
            rm = rm + (arr[i][j-1] * arr[i][j]);
        if(i != n-1)
            rm = rm + (arr[i][j-1] * arr[i+1][0]);
    }
    //column-major value
    for(i=0;i<n;i++)
    {
        for(j=0;j<n-1;j++)
        {
            if(i!=0 && j==0)
                cm = cm + (arr[n-1][i-1] * arr[j][i]);
            cm = cm + (arr[j][i] * arr[j+1][i]);
        }
    }
    rm <= cm ? printf("row-major") : printf("column-major");
    return 0;
}
