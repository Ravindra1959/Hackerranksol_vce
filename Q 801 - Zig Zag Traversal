Your task is to write a program to print the zigzag level-order traversal of a binary tree.
Here are a few examples :

  1
 / \
2   3
Traversal : 1 3 2
    1
   / \
  2   3
 / \   \
4   5   6
Traversal : 1 3 2 4 5 6
       1
      / \
     2   3
    / \   \
   4   5   6
  /   /   / \
 7    8  9   10
 Traversal : 1 3 2 4 5 6 10 9 8 7
Input
First line contains the number of nodes N.
Next N-1 lines contains information about one edge each.
Each line consists of three values : U V C which denotes that V is a child of U
If C is 'L' then V is a left child and if C is 'R' then V is a right child

Output
Print the zigzag level order traversal as explained

Sample Input 0

3
1 2 L
1 3 R
Sample Output 0

1 3 2

Code:

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int m[1000000][2] = {0};
int st1[1000000], st2[1000000];
int top1 = -1,top2 = -1, x;

int pop1()
{
    return st1[top1--];
}

int pop2()
{
    return st2[top2--];
}

int main() 
{
    int n,i;
    scanf("%d",&n);
    
    int head, child;
    char pos;
    
    for(i=0;i<n-1;i++)
    {
        scanf("%d%d %c",&head,&child,&pos);
        if(pos == 'L')      m[head][0] = child;
        else                m[head][1] = child;
    }
    
    st1[++top1] = 1;
    while(top1!=-1 || top2!=-1)
    {
        while(top1 >= 0)
        {
            x = pop1();
            if(x!=0)
            {
                printf("%d ",x);
                st2[++top2] = m[x][0];
                st2[++top2] = m[x][1];
            }
        }
        while(top2 >= 0)
        {
            x = pop2();
            if(x!=0)
            {
                printf("%d ",x);
                st1[++top1] = m[x][1];
                st1[++top1] = m[x][0];
            }
        }
    }
    
    return 0;
}
