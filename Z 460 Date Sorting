Given a number of dates, sort them in such a way that the date that corresponds to the earliest day comes first and the date that corresponds to the latest day comes last.

Input Format

First line contains N, the number of dates.
Next N lines contain one date each in the following format :
DD MM YYYY.
The date will be three integers separated by a space where the first integer is the day, the second integer is the month and the third is the year.

Constraints

1 <= N <= 100
It is guaranteed that the date will be a valid date.

Output Format

Output N lines. Each line must contain one date. The dates must appear in a sorted format.

Sample Input 0

4
9 8 1996
31 4 1995
30 4 1996
25 12 1997
Sample Output 0

31 4 1995
30 4 1996
9 8 1996
25 12 1997

Code:

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct Date
{
    int day, month, year;
};
typedef struct Date date;
int compare(const void* d1, const void* d2)
{
    if(((date*)d1)->year < ((date*)d2)->year)   return 1;
    if(((date*)d1)->year == ((date*)d2)->year && ((date*)d1)->month < ((date*)d2)->month)   return 1;
    if(((date*)d1)->year == ((date*)d2)->year && ((date*)d1)->month == ((date*)d2)->month && ((date*)d1)->day < ((date*)d2)->day)   return 1;
    return 0;
}

int main() 
{
    int n;
    scanf("%d",&n);
    struct Date arr[n];
    int i;
    for(i=0;i<n;i++)
        scanf("%d%d%d",&arr[i].day,&arr[i].month,&arr[i].year);
    qsort(arr,n,sizeof(arr[0]),compare);
    for(i=n-1;i>=0;i--)
    {
        /*if(arr[i].day < 10 && arr[i].month < 10)
            printf("0%d 0%d %d\n",arr[i].day,arr[i].month,arr[i].year);
        else if(arr[i].day >= 10 && arr[i].month < 10)
            printf("%d 0%d %d\n",arr[i].day,arr[i].month,arr[i].year);
        else if(arr[i].day < 10 && arr[i].month >= 10)
            printf("0%d %d %d\n",arr[i].day,arr[i].month,arr[i].year);
        else*/
            printf("%d %d %d\n",arr[i].day,arr[i].month,arr[i].year);
    }
        
    return 0;
}
